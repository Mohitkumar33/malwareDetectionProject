// pages/UserManagementPage.js
import React, { useEffect, useState } from "react";
import Sidebar from "@/components/aside/Sidebar";
import {
  Box,
  Button,
  Text,
  VStack,
  Input,
  Select,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Center,
  TableCaption,
} from "@chakra-ui/react";

const UserManagementPage = () => {
  const [users, setUsers] = useState([]); // State to store users
  const [name, setName] = useState(""); // State for user name
  const [email, setEmail] = useState(""); // State for user email
  const [phone, setPhone] = useState(""); // State for user phone number
  const [userType, setUserType] = useState(""); // State for user type

  // Fetch users from the API
  const fetchUsers = async () => {
    try {
      const response = await fetch("/api/users"); // Replace with your actual API endpoint
      if (!response.ok) {
        throw new Error("Failed to fetch users");
      }
      const data = await response.json();
      setUsers(data); // Set users state
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  };

  useEffect(() => {
    fetchUsers(); // Fetch users on component mount
  }, []);

  // Handle user addition
  const handleAddUser = async () => {
    try {
      const response = await fetch("/api/users", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name, email, phone, userType }),
      });

      if (!response.ok) {
        throw new Error("Failed to add user");
      }

      // Reset form fields
      setName("");
      setEmail("");
      setPhone("");
      setUserType("");

      fetchUsers(); // Refresh user list after addition
    } catch (error) {
      console.error("Error adding user:", error);
    }
  };

  // Handle user deletion
  const handleDeleteUser = async (userId) => {
    try {
      const response = await fetch(`/api/users/${userId}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        throw new Error("Failed to delete user");
      }

      fetchUsers(); // Refresh user list after deletion
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  };

  return (
    <Box>
      {/* Include Sidebar */}
      <Sidebar />

      {/* Main Content Area */}
      <Box ml="250px" p={4}>
        <VStack spacing={4} align="center">
          <Text fontSize="2xl" mb={4}>
            User Management
          </Text>

          {/* User Form */}
          <VStack spacing={3} width="full" maxWidth="400px" align="stretch">
            <Input
              placeholder="Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
            <Input
              placeholder="Email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
            <Input
              placeholder="Phone Number"
              type="tel"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
            />
            <Select
              placeholder="User Type"
              value={userType}
              onChange={(e) => setUserType(e.target.value)}
            >
              <option value="Admin">Admin</option>
              <option value="User">User</option>
              {/* Add more user types as needed */}
            </Select>
            <Button colorScheme="teal" onClick={handleAddUser}>
              Add User
            </Button>
          </VStack>

          {/* Users Table */}
          <Table variant="striped" colorScheme="teal" width="full" mt={4}>
            <TableCaption>List of registered users</TableCaption>
            <Thead>
              <Tr>
                <Th>Name</Th>
                <Th>Email</Th>
                <Th>Phone Number</Th>
                <Th>User Type</Th>
                <Th>Actions</Th>
              </Tr>
            </Thead>
            <Tbody>
              {users.map((user) => (
                <Tr key={user.id}>
                  <Td>{user.name}</Td>
                  <Td>{user.email}</Td>
                  <Td>{user.phone}</Td>
                  <Td>{user.userType}</Td>
                  <Td>
                    <Button colorScheme="yellow" mr={2}>
                      Update
                    </Button>
                    <Button
                      colorScheme="red"
                      onClick={() => handleDeleteUser(user.id)}
                    >
                      Delete
                    </Button>
                  </Td>
                </Tr>
              ))}
            </Tbody>
          </Table>
        </VStack>
      </Box>
    </Box>
  );
};

export default UserManagementPage;
