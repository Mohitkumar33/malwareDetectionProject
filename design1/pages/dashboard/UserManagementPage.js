// pages/UserManagementPage.js
import React, { useEffect, useState } from "react";
import Sidebar from "@/components/aside/Sidebar";
import {
  Box,
  Button,
  Text,
  VStack,
  Input,
  Select,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Center,
  TableCaption,
  useToast,
} from "@chakra-ui/react";

const UserManagementPage = () => {
  const [users, setUsers] = useState([]); // State to store users
  const [name, setName] = useState(""); // State for user name
  const [email, setEmail] = useState(""); // State for user email
  const [phone, setPhone] = useState(""); // State for user phone number
  const [userType, setUserType] = useState(""); // State for user type
  const [password, setPassword] = useState(""); // State for user password
  const [editMode, setEditMode] = useState(false); // State to toggle between add and edit mode
  const [editingUserId, setEditingUserId] = useState(null); // ID of the user being edited
  const toast = useToast();

  // Fetch users from the API
  const fetchUsers = async () => {
    try {
      const response = await fetch("http://localhost:3003/api/users"); // Replace with your actual API endpoint
      if (!response.ok) {
        throw new Error("Failed to fetch users");
      }
      const data = await response.json();
      setUsers(data); // Set users state
    } catch (error) {
      console.error("Error fetching users:", error);
      toast({
        title: "Error",
        description: "Failed to fetch users.",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  useEffect(() => {
    fetchUsers(); // Fetch users on component mount
  }, []);

  // Handle user addition or update
  const handleAddOrUpdateUser = async () => {
    try {
      const requestBody = { name, email, phone, userType, password };
      const endpoint = editMode
        ? `http://localhost:3003/api/users/${editingUserId}`
        : "http://localhost:3003/api/users";
      const method = editMode ? "PUT" : "POST";

      const response = await fetch(endpoint, {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        throw new Error(
          editMode ? "Failed to update user" : "Failed to add user"
        );
      }

      // Reset form fields
      setName("");
      setEmail("");
      setPhone("");
      setUserType("");
      setPassword("");
      setEditMode(false);
      setEditingUserId(null);

      fetchUsers(); // Refresh user list after addition or update

      toast({
        title: editMode ? "User Updated" : "User Added",
        description: `User ${editMode ? "updated" : "added"} successfully.`,
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error("Error adding or updating user:", error);
      toast({
        title: "Error",
        description: error.message,
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  // Handle user deletion
  const handleDeleteUser = async (userId) => {
    try {
      const response = await fetch(
        `http://localhost:3003/api/users/${userId}`,
        {
          method: "DELETE",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete user");
      }

      fetchUsers(); // Refresh user list after deletion
      toast({
        title: "User Deleted",
        description: "User deleted successfully.",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error("Error deleting user:", error);
      toast({
        title: "Error",
        description: "Failed to delete user.",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  // Handle user editing
  const handleEditUser = (user) => {
    setName(user.name);
    setEmail(user.email);
    setPhone(user.phone);
    setUserType(user.userType);
    setPassword(""); // Clear password field on edit as passwords are not usually retrieved from the backend
    setEditMode(true);
    setEditingUserId(user.id);
  };

  return (
    <Box>
      {/* Include Sidebar */}
      <Sidebar />

      {/* Main Content Area */}
      <Box ml="250px" p={4}>
        <VStack spacing={4} align="center">
          <Text fontSize="2xl" mb={4}>
            User Management
          </Text>

          {/* User Form */}
          <VStack spacing={3} width="full" maxWidth="400px" align="stretch">
            <Input
              placeholder="Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
            <Input
              placeholder="Email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
            <Input
              placeholder="Phone Number"
              type="tel"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
            />
            <Select
              placeholder="User Type"
              value={userType}
              onChange={(e) => setUserType(e.target.value)}
            >
              <option value="Admin">Admin</option>
              <option value="Student">Student</option>
            </Select>
            <Input
              placeholder="Password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            <Button colorScheme="teal" onClick={handleAddOrUpdateUser}>
              {editMode ? "Update User" : "Add User"}
            </Button>
          </VStack>

          {/* Users Table */}
          <Table variant="striped" colorScheme="teal" width="full" mt={4}>
            <TableCaption>List of registered users</TableCaption>
            <Thead>
              <Tr>
                <Th>Name</Th>
                <Th>Email</Th>
                <Th>Phone Number</Th>
                <Th>User Type</Th>
                <Th>Actions</Th>
              </Tr>
            </Thead>
            <Tbody>
              {users.map((user) => (
                <Tr key={user.id}>
                  <Td>{user.name}</Td>
                  <Td>{user.email}</Td>
                  <Td>{user.phone}</Td>
                  <Td>{user.userType}</Td>
                  <Td>
                    <Button
                      colorScheme="yellow"
                      mr={2}
                      onClick={() => handleEditUser(user)}
                    >
                      Update
                    </Button>
                    <Button
                      colorScheme="red"
                      onClick={() => handleDeleteUser(user.id)}
                    >
                      Delete
                    </Button>
                  </Td>
                </Tr>
              ))}
            </Tbody>
          </Table>
        </VStack>
      </Box>
    </Box>
  );
};

export default UserManagementPage;
