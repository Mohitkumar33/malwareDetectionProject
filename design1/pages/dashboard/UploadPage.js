// pages/UploadPage.js
import React, { useState } from "react";
import Sidebar from "@/components/aside/Sidebar";
import {
  Box,
  Button,
  Text,
  VStack,
  Input,
  Center,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
} from "@chakra-ui/react";

const UploadPage = () => {
  const [fileContent, setFileContent] = useState(""); // State to store uploaded file content
  const [predictions, setPredictions] = useState([]); // State to store predictions
  const [loading, setLoading] = useState(false); // Loading state
  const userName =
    typeof window !== "undefined" ? localStorage.getItem("name") : ""; // Retrieve the name from local storage

  // Handle file upload
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setFileContent(e.target.result); // Store file content in state
      };
      reader.readAsText(file); // Read file as text
    }
  };

  // Function to handle prediction
  const handlePredict = async () => {
    try {
      setLoading(true);
      // Split the file content by commas and remove any empty values
      const urls = fileContent
        .split(",")
        .map((url) => url.trim())
        .filter((url) => url !== "");

      // Call the external prediction API
      const response = await fetch(
        "http://127.0.0.1:8000/rf_gb_model/detect/",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ urls }), // Send the list of URLs as JSON
        }
      );

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const data = await response.json();
      setPredictions(data); // Store predictions in state
      console.log("Predictions:", data);

      // Store predictions in the database
      await savePredictions(data);
    } catch (error) {
      console.error("Error during prediction:", error);
    } finally {
      setLoading(false);
    }
  };

  // Function to save predictions to the database
  // Function to save predictions to the database
  const savePredictions = async (predictions) => {
    try {
      const userName = localStorage.getItem("name") || "Unknown User"; // Retrieve userName from local storage
  
      const formattedData = predictions.map((prediction) => ({
        url: prediction.url,
        result: prediction.prediction === "benign" ? "No" : "Yes",
        typeOfMalware: prediction.prediction, // Use camelCase as per the model definition
        detectedBy: userName,
        date: new Date().toISOString(), // Proper ISO date format
      }));
  
      const response = await fetch("http://localhost:3003/api/predictions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formattedData), // Send as an array of formatted predictions
      });
  
      if (!response.ok) {
        throw new Error("Failed to save predictions");
      }
  
      console.log("Predictions saved successfully");
    } catch (error) {
      console.error("Error saving predictions:", error);
    }
  };
  
  


  return (
    <Box>
      {/* Include Sidebar */}
      <Sidebar />

      {/* Main Content Area */}
      <Box ml="250px" p={4}>
        <VStack spacing={4} align="center">
          <Text fontSize="2xl" mb={4}>
            Upload Text File
          </Text>

          {/* Suggestions or Instructions Text */}
          <Text textAlign="center" fontSize="lg" maxWidth="600px">
            To make predictions based on your data, please upload a text file
            containing URLs, separated by commas. After uploading, click the
            "Predict" button to initiate the analysis.
          </Text>

          {/* File Upload Input */}
          <Input type="file" accept=".txt" onChange={handleFileChange} />

          {/* Display File Content */}
          <Text
            whiteSpace="pre-wrap"
            borderWidth={1}
            borderRadius="md"
            p={2}
            bg="gray.100"
            width="full"
          >
            {fileContent}
          </Text>

          {/* Predict Button */}
          <Center width="full">
            <Button
              colorScheme="teal"
              onClick={handlePredict}
              isDisabled={!fileContent || loading}
            >
              {loading ? "Predicting..." : "Predict"}
            </Button>
          </Center>

          {/* Display Prediction Results */}
          {predictions.length > 0 && (
            <Box mt={8} width="full">
              <Text fontSize="2xl" mb={4}>
                Prediction Results
              </Text>
              <Table variant="striped" colorScheme="teal" width="full">
                <Thead>
                  <Tr>
                    <Th>URL</Th>
                    <Th>Prediction</Th>
                    <Th>Result (Malware)</Th>
                    <Th>Type of Malware</Th>
                    <Th>Date</Th>
                    <Th>Detected By</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {predictions.map((prediction, index) => (
                    <Tr key={index}>
                      <Td>{prediction.url}</Td>
                      <Td>{prediction.prediction}</Td>
                      <Td>
                        {prediction.prediction === "benign" ? "No" : "Yes"}
                      </Td>
                      <Td>{prediction.prediction}</Td>
                      <Td>{new Date().toLocaleDateString()}</Td>{" "}
                      {/* Display current date */}
                      <Td>{userName}</Td>{" "}
                      {/* Display name from local storage */}
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </Box>
          )}
        </VStack>
      </Box>
    </Box>
  );
};

export default UploadPage;
